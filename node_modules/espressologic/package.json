{
  "name": "espressologic",
  "version": "1.3.0",
  "description": "A rapid development node sdk for API's built with Espresso Logic services.",
  "main": "EspressoLogicSDK.js",
  "scripts": {
    "test": "grunt eslo-unit"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/EspressoLogicCafe/npm-espressologic.git"
  },
  "keywords": [
    "Espresso",
    "Logic",
    "Espresso Logic",
    "REST",
    "API",
    "RESTful",
    "database",
    "sql",
    "mysql",
    "oracle",
    "nosql",
    "postgres",
    "mongo",
    "sqlserver",
    "mobile",
    "reactive",
    "strongloop"
  ],
  "author": {
    "name": "espressologic"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/EspressoLogicCafe/npm-espressologic/issues"
  },
  "dependencies": {
    "q": "~1.0.1",
    "underscore": "~1.7.0"
  },
  "readme": "##Espresso Logic\r\n[Espresso Logic](http://espressologic.com) is the fastest way to create REST APIs across your various data sources including SQL and NoSQL databases. You can join data across multiple data sources and write declarative/reactive programming rules that are adhered to by your REST API. Security access for resources can be as broad or granular as needed, from complete access to row and column level control. And it all deploys in the time it's taken to read about it. For more information about this SDK, please visit our [doc center](https://sites.google.com/a/espressologic.com/site/docs/live-api/node-sdk).\r\n\r\n### Installation\r\nThe SDK library is installed as we might expect, from a simple npm install command:\r\n\r\n```\r\nnpm install espressologic\r\n```\r\n\r\n### Getting Started\r\n\r\nConnecting to an existing project is done via the espressologic.connect() method. Here we are connecting to a sample API which is available as a sandbox for exploring the basics:\r\n\r\n```javascript\r\nvar espressologic, api;\r\nespressologic = require('espressologic');\r\n\r\n//via a username and password\r\napi = espressologic.connect('https://eval.espressologic.com/rest/livedemo/demo/v1', 'demo', 'Password1');\r\n\r\n//or with an API key\r\napi = espressologic.connect('https://eval.espressologic.com/rest/livedemo/demo/v1', 'readonly');\r\n```\r\n\r\nEspresso builds an API around the tables and relationships it finds in your database. Once connected, your project endpoints are accessible in an easy to use format:\r\n\r\n```javascript\r\nvar espressologic, api;\r\nespressologic = require('espressologic');\r\n\r\n//API endpoints follow a simple structure: {projectUrl}/{databasePrefix}:{tableName}\r\n//a full endpoint might look like this \"https://eval.espressologic.com/rest/livedemo/demo/v1/customer\"\r\napi = espressologic.connect('https://eval.espressologic.com/rest/livedemo/demo/v1', 'demo', 'Password1');\r\n\r\nvar customers;\r\ncustomers = api.endpoint('customer');\r\n\r\ncustomers.get().then(function (data) {\r\n\tconsole.log(data); //an array of objects from our customers table\r\n});\r\n```\r\n\r\nThe customers.get() method refers to the http request method, and PUT/POST/DELETE requests will look very similar (though, for these requests, we invite you to register for an account @ [Espresso Logic](http://www.espressologic.com/)).\r\n\r\n```\r\nvar customers, newCustomer;\r\ncustomers = api.endpoint('/customers');\r\nalphaCustomer = {\r\n    name: \"Alpha\",\r\n    credit_limit: \"1234\"\r\n};\r\n\r\n//POST\r\ncustomers.post(alphaCustomer, params).then(function (txSummary) {\r\n\tconsole.log(txSummary); //an array of objects updated\r\n});\r\n\r\n//GET\r\ncustomers.get().then(function (data) {\r\n\tconsole.log(data); //an array which will now include customer: Alpha\r\n\t\r\n\t//objects returned include metadata specific to each record,\r\n\t//the most useful to us here is the endpoint href\r\n    var alphaEndpoint = espressologic.endpoint(data[0]['@metadata'].href);\r\n\t\r\n\t//PUT\r\n    \tdata[0].name = 'Alpha Updated';\r\n    \talphaEndpoint.put(data[0]).then(function(txSummary) {\r\n    \t    console.log(txSummary);\r\n\t    });\r\n\t    \r\n\t//DELETE\r\n    \talphaEndpoint.delete(data[0]).then(function(txSummary) {\r\n    \t    console.log(txSummary);\r\n\t    });\r\n});\r\n```\r\n\r\n### Using Node.js to Create a Database connection, create a Resource, and Add Reactive Logic (Metadata API)\r\n\r\n```javascript\r\n//API endpoints follow a simple structure: {projectUrl}/{databasePrefix}:{tableName} to retrieve data from your service\r\n//a full endpoint might look like this \"https://eval.espressologic.com/rest/livedemo/demo/v1/customer\"\r\n\r\n//this is the meta api used to create and manage the creation of a project, database, resources, and rules\r\n//use the servername and password sent to you when you created a new appliance or cloud account.\r\nvar espressologic = require('./EspressoLogicSDK');\r\nvar serverName = 'http://{myservername}/rest/abl/admin/v2';\r\nvar userName = 'admin';\r\nvar password = 'mypassword';\r\nvar api = espressologic.connect(serverName, userName, password);\r\n\r\n\r\n//create  or find your project ID and set the global value\r\nvar projects = api.endpoint('AllProjects?pagesize=100');\r\nprojects.get().then(function(data){\r\n\tfor(var idx in data){\r\n\t\tconsole.log('ProjectName: '+data[idx].name + \" Project ident \"+data[idx].ident);\r\n\t}\r\n});\r\nvar project_ident = 1001;\r\nvar params = {};\r\n\r\n//\tdbasetype_ident\r\n//\t1\tMySQL\t\t\tMySQL Database\r\n//\t2\tOracle\t\t\tOracle (Thin driver)\r\n//\t3\tSQLServer(jTDS)\tMicrosoft SQL Server(jTDS - obsolete)\r\n//\t5\tSQLServer\t\tMicrosoft SQL Server\r\n//\t6\tAzureSQL\t\tWindows Azure SQL\r\n//\t7\tNuoDB (beta)\tNuoDB - beta\r\n//\t8\tPostgreSQL\t\tPostgres (beta)\r\n\r\n//create a new connection to our project\r\nvar dbschema = api.endpoint('/DbSchemas');\r\nvar json = {\"name\":\"My New database\",\"url\":\"jdbc:mysql://<hostname>/<db-name>\",\"user_name\":\"jdoe\",\"active\":false,\"project_ident\":project_ident,\"dbasetype_ident\":1}\r\ndbschema.post(json, params).then(function (txSummary) {\r\n    console.log(txSummary); //an array of objects updated\r\n});\r\n\r\n//create a new resource\r\nvar resource = api.endpoint('/AllResources');\r\nvar json = {\"resource_type_ident\":1,\"apiversion_ident\":project_ident,\"name\":\"MyNewCustomerResource\",\"prefix\":\"demo\",\"table_name\":\"customer\",\"is_collection\":\"Y\"};\r\nresource.post(json, params).then(function (txSummary) {\r\n    console.log(txSummary); //an array of objects updated\r\n});\r\n//add child resource - using root_ident from prior txSummary - remember to add join as childColumn = [parentColumn]\r\nvar subresource = api.endpoint('/AllResources');\r\nvar json ={\"apiversion_ident\":project_ident,\"resource_type_ident\":1,\"name\":\"NewChildResource\",\"prefix\":\"demo\",\"table_name\":\"orders\", \"join_condition\": \"customerID=[customerId]\",\"is_collection\":\"Y\",\"root_ident\":1086,\"container_ident\":1086};\r\nsubresource.post(json, params).then(function (txSummary) {\r\n    console.log(txSummary); //an array of objects updated\r\n});\r\n\r\n//\truletype_ident\r\n//\t1\tsum\t\t\t\tsum child attr into parent\r\n//\t2\tcount\t\t\tcount child attr into parent\r\n//\t3\tformula\t\t\tformula using table & parent attributes\r\n//\t4\tparent copy\t\tnon-cascaded parent value\r\n//\t5\tvalidation\t\tmulti-attribute validation\r\n//\t6\tcommit validation\tmulti-attribute validation after all rows\r\n//\t7\tevent\t\t\textensible event\r\n//\t8\tearly event\t\textensible event before rule execution\r\n//\t9\tcommit event\textensible event after all rows\r\n//\t11\tminimum\t\t\treplicate the minimum value from a child attribute\r\n//\t12\tmaximum\t\t\treplicate the maximum value from a child attribute\r\n//\t13\tmanaged parent\tcreate a parent if it does not exist//declare validation and derivation rules.\r\n\r\n//add SUM on Customer\r\nvar  sumrule  = api.endpoint('/AllRules');\r\nvar json = {\"ruletype_ident\":1,\"entity_name\":\"demo:customer\",\"project_ident\":project_ident,\"attribute_name\":\"balance\",\"rule_text1\":\"purchaseorderList\",\"rule_text3\":\"amount_total\",\"active\":true};\r\nsumrule.post(json, params).then(function (txSummary) {\r\n    console.log(txSummary); //an array of objects updated\r\n});\r\n//Add Validation Check on Credit Limit\r\nvar validationRule = api.endpoint('/AllRules');\r\nvar json = {\"ruletype_ident\":5,\"entity_name\":\"demo:customer\",\"attribute_name\": null,\"project_ident\":project_ident,\"prop4\": \"javascript\",\"rule_text1\": \"return row.balance <= row.credit_limit;\",\"rule_text2\": \"Customer {name}'s balance: {balance|#,##0.00} exceeds their credit limit: {credit_limit|#,##0.00}\",\"active\":true};\r\nvalidationRule.post(json, params).then(function (txSummary) {\r\n    console.log(txSummary); //an array of objects updated\r\n});\r\n\r\n\r\n```\r\n",
  "readmeFilename": "README.md",
  "_id": "espressologic@1.2.8",
  "dist": {
    "shasum": "32accc8fab0aa8652ce45e3fec27b76c4177876f"
  },
  "_from": "espressologic@1.2.8",
  "_resolved": "https://registry.npmjs.org/espressologic/-/espressologic-1.2.8.tgz"
}
